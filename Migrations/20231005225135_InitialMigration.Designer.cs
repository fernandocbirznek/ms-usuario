// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ms_usuario;

#nullable disable

namespace ms_usuario.Migrations
{
    [DbContext(typeof(UsuarioDbContext))]
    [Migration("20231005225135_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ms_usuario.Domains.AreaInteresse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AreaInteresse");
                });

            modelBuilder.Entity("ms_usuario.Domains.Conquistas", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Conquistas");
                });

            modelBuilder.Entity("ms_usuario.Domains.Sociedade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sociedade");
                });

            modelBuilder.Entity("ms_usuario.Domains.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ComentarioAula")
                        .HasColumnType("bigint");

                    b.Property<long>("ComentarioForum")
                        .HasColumnType("bigint");

                    b.Property<long>("CurtirAula")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("NoticiaVisualizada")
                        .HasColumnType("bigint");

                    b.Property<long>("PerfilId")
                        .HasColumnType("bigint");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("SociedadeId")
                        .HasColumnType("bigint");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("integer");

                    b.Property<long>("TopicoForum")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PerfilId")
                        .IsUnique();

                    b.HasIndex("SociedadeId");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("ms_usuario.Domains.UsuarioAreaInteresse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AreaInteresseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AreaInteresseId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioAreaInteresse");
                });

            modelBuilder.Entity("ms_usuario.Domains.UsuarioConquistas", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ConquistaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ConquistaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioConquistas");
                });

            modelBuilder.Entity("ms_usuario.Domains.UsuarioPerfil", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("Foto")
                        .HasColumnType("bytea");

                    b.Property<string>("Hobbie")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UsuarioPerfil");
                });

            modelBuilder.Entity("ms_usuario.Domains.Usuario", b =>
                {
                    b.HasOne("ms_usuario.Domains.UsuarioPerfil", "Perfil")
                        .WithOne("Usuario")
                        .HasForeignKey("ms_usuario.Domains.Usuario", "PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ms_usuario.Domains.Sociedade", "Sociedade")
                        .WithMany("Usuario")
                        .HasForeignKey("SociedadeId");

                    b.Navigation("Perfil");

                    b.Navigation("Sociedade");
                });

            modelBuilder.Entity("ms_usuario.Domains.UsuarioAreaInteresse", b =>
                {
                    b.HasOne("ms_usuario.Domains.AreaInteresse", "AreaInteresse")
                        .WithMany("UsuarioAreaInteresses")
                        .HasForeignKey("AreaInteresseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ms_usuario.Domains.Usuario", "Usuario")
                        .WithMany("UsuarioAreaInteresses")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaInteresse");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ms_usuario.Domains.UsuarioConquistas", b =>
                {
                    b.HasOne("ms_usuario.Domains.Conquistas", "Conquista")
                        .WithMany("UsuarioConquistas")
                        .HasForeignKey("ConquistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ms_usuario.Domains.Usuario", "Usuario")
                        .WithMany("UsuarioConquistas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conquista");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ms_usuario.Domains.AreaInteresse", b =>
                {
                    b.Navigation("UsuarioAreaInteresses");
                });

            modelBuilder.Entity("ms_usuario.Domains.Conquistas", b =>
                {
                    b.Navigation("UsuarioConquistas");
                });

            modelBuilder.Entity("ms_usuario.Domains.Sociedade", b =>
                {
                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ms_usuario.Domains.Usuario", b =>
                {
                    b.Navigation("UsuarioAreaInteresses");

                    b.Navigation("UsuarioConquistas");
                });

            modelBuilder.Entity("ms_usuario.Domains.UsuarioPerfil", b =>
                {
                    b.Navigation("Usuario")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
